% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_mixparfm.R
\name{fit_mixparfm}
\alias{fit_mixparfm}
\title{Fit Finite Mixtures of Parametric Frailty Models}
\usage{
fit_mixparfm(
  formula,
  G,
  class_init,
  grouping_variable = NULL,
  strata = NULL,
  X_gaussian_variables = NULL,
  X_multinomial_variables = NULL,
  data,
  baseline = c("weibull", "inweibull", "frechet", "exponential", "gompertz",
    "loglogistic", "lognormal", "logskewnormal"),
  frailty = c("none", "gamma", "ingau", "possta", "lognormal", "loglogistic"),
  control_EM_algorithm = control_EM(),
  control_parfm_algorithm = control_parfm()
)
}
\arguments{
\item{formula}{A formula specifying the survival model, with a \code{Surv} object on the
left-hand side and covariates on the right-hand side, e.g.,
\code{Surv(time, status) ~ x1 + x2}.}

\item{G}{Integer. Number of mixture components (clusters) to fit.}

\item{class_init}{Integer vector of length \code{nrow(data)} specifying initial cluster
assignments. Each element should be an integer between 1 and \code{G}.}

\item{grouping_variable}{Character string specifying the name of the grouping variable
in \code{data} that defines the hierarchical structure (e.g., hospital ID, family ID).
This variable identifies the groups for which frailty effects are estimated. If NULL,
no frailty structure is assumed.}

\item{strata}{Character string specifying the stratification variable name, or NULL
for no stratification. Default is NULL. (Not used at the moment)}

\item{X_gaussian_variables}{Character vector specifying names of continuous covariates
to be modeled as cluster-weighted (random) via Gaussian distributions. If NULL
(default), all covariates are treated as fixed.}

\item{X_multinomial_variables}{Character vector specifying names of categorical
covariates to be modeled as cluster-weighted (random) via multinomial distributions.
If NULL (default), categorical covariates are treated as fixed.}

\item{data}{A data frame containing the variables specified in \code{formula},
\code{grouping_variable}, and the cluster-weighted covariate specifications.}

\item{baseline}{Character string specifying the baseline hazard distribution. Options are:
\describe{
\item{\code{"weibull"}}{Weibull distribution (default)}
\item{\code{"exponential"}}{Exponential distribution}
\item{\code{"inweibull"}}{Inverse Weibull distribution}
\item{\code{"frechet"}}{Fr√©chet distribution}
\item{\code{"gompertz"}}{Gompertz distribution}
\item{\code{"loglogistic"}}{Log-logistic distribution}
\item{\code{"lognormal"}}{Log-normal distribution}
\item{\code{"logskewnormal"}}{Log-skew-normal distribution}
}}

\item{frailty}{Character string specifying the frailty distribution. Options are:
\describe{
\item{\code{"none"}}{No frailty (independence model)}
\item{\code{"gamma"}}{Gamma frailty (default)}
\item{\code{"ingau"}}{Inverse Gaussian frailty}
\item{\code{"possta"}}{Positive stable frailty}
\item{\code{"lognormal"}}{Log-normal frailty}
\item{\code{"loglogistic"}}{Log-logistic frailty}
}}

\item{control_EM_algorithm}{A list of control parameters for the EM algorithm,
as returned by \code{\link{control_EM}}. Default is \code{control_EM()}.}

\item{control_parfm_algorithm}{A list of control parameters for fitting the
parametric frailty models, as returned by \code{\link{control_parfm}}.
Default is \code{control_parfm()}.}
}
\value{
An object of class \code{mixparfm} (a list) with components:
\item{loglik}{Final log-likelihood value.}
\item{parameters}{A list containing:
\describe{
\item{\code{tau}}{Vector of mixing proportions (length \code{G}).}
\item{\code{AFT_parameters}}{Matrix of AFT model parameters (baseline and
regression coefficients) with one column per mixture component.}
\item{\code{X_gaussian_parameters}}{List with \code{mu} (means) and
\code{sigma} (covariances) for Gaussian cluster-weighted covariates
(only present if \code{X_gaussian_variables} is not NULL).}
\item{\code{X_multinomial_parameters}}{List of probability matrices for
categorical cluster-weighted covariates (only present if
\code{X_multinomial_variables} is not NULL).}
}
}
\item{frailty_effect}{Data frame with estimated frailty effects for each group
and mixture component (NULL if \code{frailty = "none"}).}
\item{frailty_var_effect}{Data frame with variances of frailty effects
(NULL if \code{frailty = "none"}).}
\item{z}{Matrix of posterior probabilities of cluster membership (N x G).}
\item{class}{Vector of MAP cluster assignments (length N).}
\item{bic}{Bayesian Information Criterion value.}
\item{baseline}{The baseline hazard distribution used.}
\item{frailty}{The frailty distribution used.}
\item{fit_parfm}{List of length \code{G} containing the fitted \code{parfm}
objects for each mixture component.}
\item{loglik_vec}{Vector of log-likelihood values at each EM iteration.}
}
\description{
Fits finite mixtures of parametric frailty models with possibly random (cluster-weighted)
covariates using an EM-type algorithm. The model accommodates hierarchical survival data
with a grouping structure (e.g., patients within hospitals) and allows for heterogeneity
across latent subpopulations.
}
\details{
This function implements a finite mixture of parametric frailty models suitable for
clustered survival data. The model extends standard mixture models by:
\enumerate{
\item Incorporating a frailty (random effect) structure within each mixture component
to account for within-group correlation.
\item Allowing covariates to be cluster-specific (cluster-weighted), meaning their
distributions can vary across mixture components.
}

The EM algorithm alternates between:
\itemize{
\item \strong{E-step}: Computing posterior probabilities of cluster membership
\item \strong{M-step}: Updating mixture component parameters by fitting separate
parametric frailty models via the \code{parfm} package
}

The function uses either Classification EM (CEM) with hard assignments or
Stochastic EM (SEM) with probabilistic assignments, as specified in
\code{control_EM_algorithm}.
}
\note{
\itemize{
\item This package requires the modified \code{parfm} package available at
\url{https://github.com/AndreaCappozzo/parfm}.
\item Character variables in \code{data} are automatically converted to factors.
\item The function handles cases where some factor levels may be absent in certain
mixture components.
}
}
\examples{
\dontrun{
# Simulate data (using frailtySurv package)
library(frailtySurv)
set.seed(46)

# Generate two subpopulations with different characteristics
df1 <- genfrail(N = 10, K = 40, beta = c(2, 3),
                frailty = "gamma", theta = 6,
                covar.matrix = matrix(rnorm(400*2, c(2,3), c(1,2)), ncol=2),
                Lambda_0 = function(t, lambda=0.2, rho=3) lambda*t^rho)

df2 <- genfrail(N = 10, K = 50, beta = c(-2, -3),
                frailty = "gamma", theta = 0.1,
                covar.matrix = matrix(rnorm(500*2, c(4,5), c(2,1)), ncol=2),
                Lambda_0 = function(t, lambda=0.2, rho=15) lambda*t^rho)

df <- rbind(df1, df2)
true_class <- rep(1:2, c(nrow(df1), nrow(df2)))

# Initialize cluster assignments with some noise
class_init <- true_class
class_init[1:450] <- sample(1:2, 450, replace = TRUE, prob = c(0.8, 0.2))
class_init[451:900] <- sample(1:2, 450, replace = TRUE, prob = c(0.2, 0.8))

# Fit mixture model with fixed covariates
fit_fixed <- fit_mixparfm(
  formula = Surv(time, status) ~ Z1 + Z2,
  G = 2,
  data = df,
  class_init = class_init,
  grouping_variable = "family",
  baseline = "weibull",
  frailty = "gamma",
  control_EM_algorithm = control_EM(itermax = 50),
  control_parfm_algorithm = control_parfm(maxit = 1000)
)

# Check convergence
plot(fit_fixed$loglik_vec, type = "l",
     xlab = "Iteration", ylab = "Log-likelihood")

# Fit mixture model with cluster-weighted covariates
fit_cw <- fit_mixparfm(
  formula = Surv(time, status) ~ Z1 + Z2,
  G = 2,
  data = df,
  class_init = class_init,
  grouping_variable = "family",
  X_gaussian_variables = c("Z1", "Z2"),
  baseline = "weibull",
  frailty = "gamma",
  control_EM_algorithm = control_EM(itermax = 50),
  control_parfm_algorithm = control_parfm()
)

# Compare classifications
table(Estimated = fit_cw$class, True = true_class)

# View parameter estimates
fit_cw$parameters

# View BIC
fit_cw$bic
}
}
\references{
Caldera, Cappozzo, Masci, Forlani, Antonelli, Leoni, Paganoni, Ieva (2025+).
Cluster-weighted modeling of lifetime hierarchical data for profiling COVID-19
heart failure patients. \url{https://arxiv.org/abs/2507.12230}
}
\seealso{
\code{\link{control_EM}}, \code{\link{control_parfm}}, \code{\link[parfm]{parfm}},
\code{\link[survival]{Surv}}
}
